#!/usr/bin/env bash

set -e

# Get the directory of this script
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

# shellcheck source=args.sh
. "$DIR/args.sh"
# shellcheck source=functions.sh
. "$DIR/functions.sh"

app=""
firewall=""
include_ssh_key=false
iso=""
label=""
os=""
plan="1024 MB RAM,25 GB SSD,1.00 TB BW"
region="Chicago"
script=""
tag=""

if [ $_arg_name = "buildiso" ]; then
    include_ssh_key=true
    label="isobuilder"
    os="Ubuntu 18.04 x64"
    region="New Jersey"
    script="create-live-iso"

elif [ $_arg_name = "fcos" ]; then
    iso="installcoreos.iso"
    label="fcos"
    tag="fcos"

elif [ $_arg_name = "iqfeed" ]; then
    iso="server2019.iso"
    label="iqfeed"
    plan="4096 MB RAM,80 GB SSD,3.00 TB BW"
    tag="iqfeed"

elif [[ $_arg_name == stack* ]]; then
    assert_repo_exists $_arg_name

    firewall="coreos"
    iso="installcoreos.iso"
    label=$_arg_name
    tag=$_arg_name

elif [ $_arg_name = "test" ]; then
    iso="installcoreos.iso"
    label="test"
    tag="test"

elif [ $_arg_name = "ubuntu" ]; then
    # Using docker app because it's simply ubuntu with docker pre-installed
    app="Docker on Ubuntu 18.04 x64"
    include_ssh_key=true
    label="ubuntu"
    script="setup-ubuntu"

elif [ $_arg_name = "windows" ]; then
    iso="server2019.iso"
    label="windows"
    plan="4096 MB RAM,80 GB SSD,3.00 TB BW"

else
    die "Unknown server type $_arg_name. Available server types are:
buildiso
fcos
iqfeed
stack-*
test
ubuntu
windows"
fi

plan_id=$(vultr-cli plans list | grep "$plan" | awk '{print $1}')
region_id=$(vultr-cli regions list | grep "$region" | awk '{print $1}')
command="vultr-cli server create --region $region_id --plan $plan_id --private-network true"

if ! [ -z "$app" ]; then
    app_id=$(vultr-cli apps | grep "$app" | awk '{print $1}')
    command="$command --app $app_id"
fi

if ! [ -z "$firewall" ]; then
    firewall_group=$(vultr-cli firewall group list | grep "$firewall" | awk '{print $1}')
    command="$command --firewall-group $firewall_group"
fi

if [ "$include_ssh_key" = true ] ; then
    ssh_key_id=$(vultr-cli ssh list | grep personal | awk '{print $1}')
    command="$command --ssh-keys $ssh_key_id"
fi

if ! [ -z "$iso" ]; then
    iso_id=$(vultr-cli iso private | grep "$iso" | awk '{print $1}')
    command="$command --iso $iso_id"
fi

if ! [ -z "$label" ]; then
    command="$command --label $label"
fi

if ! [ -z "$os" ]; then
    os_id=$(vultr-cli os | grep "$os" | awk '{print $1}')
    command="$command --os $os_id"
fi

if ! [ -z "$script" ]; then
    script_id=$(vultr-cli script list | grep "$script" | awk '{print $1}')
    command="$command --script-id $script_id"
fi

if ! [ -z "$tag" ]; then
    command="$command --tag $tag"
fi

echo "+ $command"
output="$(eval "$command")"
echo "$output"

id=$(echo "$output" | grep "Instance created - ID" | awk -F " : " '{print $2}')

# Output the IP
sleep 1
ip=$(vultr-cli server info "$id" | grep "Main IP" | awk '{print $3}')
while [ -z "$ip" ] || [ "$ip" = "0.0.0.0" ]; do
    sleep 1
    ip=$(vultr-cli server info "$id" | grep "Main IP" | awk '{print $3}')
done
echo "$ip"

if [ $_arg_wait = on ]; then
    wait "$ip"
fi
